<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="http://d3js.org/topojson.v1.min.js"></script>
<script src="http://datamaps.github.io/scripts/datamaps.usa.min.js"></script>
<script>
	$(function() {
		$('a#one-Pk').tooltip({
			title: 'Pick number'
		});
		$('a#one-FG\\%').tooltip({
			title: 'Average field goal percentage'
		});
		$('a#one-3P\\%').tooltip({
			title: 'Average 3 point field goal percentage'
		});
		$('a#one-FT\\%').tooltip({
			title: 'Average free throw percentage'
		});
		$('a#one-MP').tooltip({
			title: 'Average minutes per game'
		});
		$('a#one-PTS').tooltip({
			title: 'Average points per game'
		});
		$('a#one-TRB').tooltip({
			title: 'Average total rebounds per game'
		});
		$('a#one-AST').tooltip({
			title: 'Average assists per game'
		});
		$('a#one-WS').tooltip({
			title: 'Average win shares (Estimate of # of wins contributed by player)'
		});
		$('a#one-RTG').tooltip({
			title: 'Average Rating (PTS + TRB + AST)'
		});
		$('a#one-count').tooltip({
			title: 'Number of players analyzed'
		});
		$('a#one-Star').tooltip({
			title: 'Percentage players of draft position with Star Rating'
		});
		$('a#one-Solid').tooltip({
			title: 'Percentage players of draft position with Solid Rating'
		});
		$('a#one-RoleP').tooltip({
			title: 'Percentage players of draft position with Role Player Rating'
		});
		$('a#one-BenchP').tooltip({
			title: 'Percentage players of draft position with Bench player Rating'
		});
		$('a#one-Bust').tooltip({
			title: 'Percentage players of draft position that are busts'
		});
		$('a#one-DNP').tooltip({
			title: 'Percentage of players of draft position that did not play'
		});
		$('a#two-Pk').tooltip({
			title: 'Pick number'
		});
		$('a#two-Tm').tooltip({
			title: 'The team that drafted this player'
		});
		$('a#two-Player').tooltip({
			title: 'Player name'
		});
		$('a#two-FG\\%').tooltip({
			title: 'Average field goal percentage'
		});
		$('a#two-3P\\%').tooltip({
			title: 'Average 3 point field goal percentage'
		});
		$('a#two-FT\\%').tooltip({
			title: 'Average free throw percentage'
		});
		$('a#two-MP').tooltip({
			title: 'Average minutes per game'
		});
		$('a#two-PTS').tooltip({
			title: 'Average points per game'
		});
		$('a#two-TRB').tooltip({
			title: 'Average total rebounds per game'
		});
		$('a#two-AST').tooltip({
			title: 'Average assists per game'
		});
		$('a#two-WS').tooltip({
			title: 'Average win shares (Estimate of # of wins contributed by player)'
		});
		$('a#two-WS\\/48').tooltip({
			title: 'Average win shares per 48 minutes (Estimate of # of wins contributed by player)'
		});
		$('a#two-RTG').tooltip({
			title: 'Average Rating (PTS + TRB + AST)'
		});
		$('a#two-RTG_exp').tooltip({
			title: 'Expected rating of pick position'
		});
		$('a#two-RTG_diff').tooltip({
			title: 'Difference between expected and actual rating of player'
		});
		$('a#two-PTS_exp').tooltip({
			title: 'Expected PTS of pick position'
		});
		$('a#two-TRB_exp').tooltip({
			title: 'Expected TRB of pick position'
		});
		$('a#two-AST_exp').tooltip({
			title: 'Expected AST of pick position'
		});
		$('a#three-Tm').tooltip({
			title: 'Team name'
		});
		$('a#three-Team_Draft_RTG').tooltip({
			title: "Rating of how well each team drafted. Takes into account selected players' performance given their draft position"
		});
		$('a#three-picks').tooltip({
			title: 'Number of picks drafted'
		});
		$('a#three-Star').tooltip({
			title: 'Number of stars drafted'
		});
		$('a#three-Solid').tooltip({
			title: 'Number of solid players drafted'
		});
		$('a#three-RoleP').tooltip({
			title: 'Number of role players drafted'
		});
		$('a#three-BenchP').tooltip({
			title: 'Number of bench players drafted'
		});
		$('a#three-Bust').tooltip({
			title: 'Number of busts drafted'
		});
		$('a#three-DNP').tooltip({
			title: 'Number of players drafted who did not play'
		});
	})
</script>

<nav class='navbar-example navbar-fixed-top container'>
		<ul class='nav nav-tabs'>
		  <li role='presentation' class='active'><a href='#overview'>Overview</a></li>
		  <li role='presentation'><a href='#technology'>Technology Stack</a></li>
		  <li role='presentation'><a href='#expected'>Expected Performance</a></li>
		  <li role='presentation'><a href='#value'>Value Picks</a></li>
		  <li role='presentation'><a href='#team'>Team Performance</a></li>
		</ul>
</nav>

<div class='container'>
	<div class='col-md-8'>

		<div class='page-header' id ='overview'>
		  <h1>An Overview of Our Project <small>Rentao Wu & Danny Shaw CMSC498O</small></h1>
		</div>

		<div>
			For our groupâ€™s project, we are aggregating National Basketball
			Association (NBA) data, specifically season statistics for players as well as projected
			draft and actual draft results and using various resources and techniques, including
			ones that we have learned in this class so far, to analyze and display our findings using
			graphical and table representations. The python code and ipython notebook that was used to generate the tables is located at <a href='http://nbviewer.ipython.org/github/rentaow/project498/blob/master/draft_PER/draft_pos_rating.ipynb'>http://nbviewer.ipython.org/github/rentaow/project498/blob/master/draft_PER/draft_pos_rating.ipynb</a>.

		</div>

		<div class='page-header' id ='technology'>
		  <h1>Our Technology Stack <small>What's working behind the scenes?</small></h1>
		</div>

		<dl class='dl-horizontal'>
			<dt>Web Server/ Backend</dt>
			<dd>Ruby on Rails</dd>
			<dt>Web Hosting</dt>
			<dd>Heroku</dd>
			<dt>Front-end</dt>
			<dd>Twitter Bootstrap and custom CSS/Javascript</dd>
			<dt>Source Control</dt>
			<dd>Github: <a href='https://github.com/rentaow/project498'>https://github.com/rentaow/project498</a></dd>
			<dt>Table Generation</dt>
			<dd>Python and iPython Notebook</dd>
			<dt>Graph Generation</dt>
			<dd>D3.js, DataMaps</dd>
		</dl>

		<div class='page-header' id ='expected'>
		  <h1>Expected Performance <small>What's expected of a draft pick?</small></h1>
		</div>
		
		<div>
			This table provides two types of analytics given per draft position. It describes the expected performance of any draft position. It also tells us what are the chances a player picked at this position is a star player.

			We used a simple rating system (RTG) for grouping players:

			<table class='table table-condensed table-bordered table-hover' id = 'table-rating'>
				<tr>
					<th> Rating (RTG) </th>
					<th> Group </th>
				</tr>
				<tr class='success'>
					<td> > 19.9 </td>
					<td> Star </td>
				</tr>
				<tr class='info'>
					<td> 15.0 - 19.9 </td>
					<td> Solid </td>
				</tr>
				<tr class='active'>
					<td> 10 - 14.9 </td>
					<td> Role Player </td>
				</tr>
				<tr class='warning'>
					<td> 5 - 9.9 </td>
					<td> Bench Player </td>
				</tr>
				<tr class='error'>
					<td> < 5 </td>
					<td> Bust </td>
				</tr>
				<tr>
					<td> DNP </td>
					<td> Did Not Play </td>
				</tr>
			</table>

			This table is produced from aggregating players' career stats along with their draft position from the past 24 NBA seasons (90'-14'). We mined NBA players' stats from online databases and merged them into a single csv file. From these sets of data we then produced average statistics for each draft position. We also created our own rating statistic (RTG) to measure players' performances.
		</div>

		<table class='table table-striped table-hover' id ='table-one'>
		  <tr>
		  <% @table_one.headers.each do |header| %>
		    <th><a id='one-<%= header %>' data-toggle='tooltip'><%= header %></a></th>
		  <% end %> 
		  </tr>
		  <% @table_one.each do |row| %>
		    <tr>
		    <% row.each do |element| %>
		      <td><%= element[1] %></td>
		    <% end %>
		    </tr>
		  <% end %> 
		</table>

		<div id="graph-one">
		</div>

		<p>
			The above graph shows the relationship between a drafted player's
			pick number and the rating of that particular pick number of the past 24 years. 60 picks are shown on the x-axis with the pick number's respective rating represented on the y-axis. This graph was created using D3.js and the javascript code we used to generate the graph is displayed below. 
		</p>
		<pre>
		var margin = {top: 20, right: 20, bottom: 30, left: 50},
		   width = 960 - margin.left - margin.right,
		   height = 500 - margin.top - margin.bottom;

		var parseDate = d3.time.format("%d-%b-%y").parse;

		var x = d3.scale.linear()
		    .range([0, width]);

		var y = d3.scale.linear()
		    .range([height, 0]);

		var xAxis = d3.svg.axis()
		    .scale(x)
		    .orient("bottom");

		var yAxis = d3.svg.axis()
		    .scale(y)
		    .orient("left");

		var area = d3.svg.area()
		    .x(function(d) { return x(d.pick); })
		    .y0(height)
		    .y1(function(d) { return y(d.rating); });

		var svg = d3.select("#graph-one").append("svg")
		    .attr("width", width + margin.left + margin.right)
		    .attr("height", height + margin.top + margin.bottom)
		  .append("g")
		    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		d3.tsv("data.tsv", function(error, data) {
		  data.forEach(function(d) {
		    d.pick = +d.pick;
		    d.rating = +d.rating;
		  });

		  x.domain([1, d3.max(data, function(d) { return d.pick; })]);
		  y.domain([0, d3.max(data, function(d) { return d.rating; })]);

		  svg.append("path")
		      .datum(data)
		      .attr("class", "area")
		      .attr("d", area);

		  svg.append("g")
		      .attr("class", "x axis")
		      .attr("transform", "translate(0," + height + ")")
		      .call(xAxis)
		      .append("text")

		  svg.append("g")
		      .attr("class", "y axis")
		      .call(yAxis)
		    .append("text")
		      .attr("transform", "rotate(-90)")
		      .attr("y", 6)
		      .attr("dy", ".71em")
		      .style("text-anchor", "end")
		      .text("RTG");

		      svg.append("text")
		        .attr("x", (width / 2))             
		        .attr("y", 0 + (margin.top / 2))
		        .attr("text-anchor", "middle")  
		        .style("font-size", "16px") 
		        .style("text-decoration", "underline")  
		        .text("Pick vs RTG");
		});
		</pre>

		<div class='page-header' id ='value'>
		  <h1>Value Picks <small>Who's worth and who's not</small></h1>
		</div>	
			This part is intended to look into the value of each pick and more specifically which players were the best value for their pick position. The Rating differential is the stat we are calculating to see the players' value. It is the players Rating compared to the expected Rating of their pick position. The higher the rating differential, the greater the player out performed what is expected of them at their pick position. The players in this table are sorted by Rating differential in descending order.
		<div>

		</div>
		<table class='table table-striped table-hover' id ='table-two'>
		  <tr>
		  <% @table_two.headers.each do |header| %>
		    <th><a id='two-<%= header %>' data-toggle='tooltip'><%= header %></a></th>
		  <% end %> 
		  </tr>
		  <% @table_two.each do |row| %>
		    <tr>
		    <% row.each do |element| %>
		      <td><%= element[1] %></td>
		    <% end %>
		    </tr>
		  <% end %> 
		</table>

		<p>
			The following graph is an interesting graphical representation of certain drafted players and their Rating Differential. We selected an arbitrary group of players who had a mix of positive and negative differentials to portray the desired shape of the graph. D3.js was used to generate this graph, and we essentially created a bar graph and then rotated it 90 degrees so that the bars would be horizontal, and also used appropriate class attributes to made the positive bars green and the negative bars red.
		</p>

		<div id="graph-three"></div>

		<pre>
		var margin2 = {top: 30, right: 10, bottom: 10, left: 10},
		    width2 = 960 - margin2.left - margin2.right,
		    height2 = 500 - margin2.top - margin2.bottom;

		var x2 = d3.scale.linear()
		    .range([0, width2])

		var y2 = d3.scale.ordinal()
		    .rangeRoundBands([0, height2], .2);

		var xAxis2 = d3.svg.axis()
		    .scale(x2)
		    .orient("top");

		var svg2 = d3.select("#graph-three").append("svg")
		    .attr("width", width2 + margin2.left + margin2.right)
		    .attr("height", height2 + margin2.top + margin2.bottom)
		  .append("g")
		    .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

		d3.csv("three.csv", type, function(error, data) {
		  x2.domain(d3.extent(data, function(d) { return d.value; })).nice();
		  y2.domain(data.map(function(d) { return d.name; }));

		  svg2.selectAll(".bar")
		      .data(data)
		    .enter().append("rect")
		      .attr("class", function(d) { return d.value < 0 ? "bar_negative" : "bar_positive"; })
		      .attr("x", function(d) { return x2(Math.min(0, d.value)); })
		      .attr("y", function(d) { return y2(d.name); })
		      .attr("width", function(d) { return Math.abs(x2(d.value) - x2(0)); })
		      .attr("height", y2.rangeBand());

		  svg2.selectAll(".bartext")
		  	.data(data)
		  	.enter()
		  	.append("text")
		  	.attr("class","bartext")
		  	.attr("x", function(d) { 
		  		if (d.value > 0) {
		  			if (d.name == "Kobe Bryant")
		  				return x2(0) - 83;
		  			else if (d.name == "Kevin Durant")
		  				return x2(0) - 85;
		  			else if (d.name == "Tony Parker")
		  				return x2(0) - 81;
		  			else if (d.name == "Lebron James")
		  				return x2(0) - 94;
		  			else if (d.name == "Vince Carter")
		  				return x2(0) - 84;
		  			else if (d.name == "Blake Griffin")
		  				return x2(0) - 82;
		  			else if (d.name == "Roy Hibbert")
		  				return x2(0) - 80;
		  			else if (d.name == "Kyrie Irving")
		  				return x2(0) - 75;
		  			else if (d.name == "Elliot Perry")
		  				return x2(0) - 73;
		  			else
		  				return x2(0);
		  		} else {
		  			return x2(0) + 3;
		  		}; })
		      .attr("y", function(d) { return y2(d.name) + 13; })
		  	.text(function(d) {
		  		return d.name;
		  	});
		  svg2.append("g")
		      .attr("class", "x axis")
		      .call(xAxis2);

		  svg2.append("g")
		      .attr("class", "y axis")
		    .append("line")
		      .attr("x1", x2(0))
		      .attr("x2", x2(0))
		      .attr("y2", height2);

		});

		function type(d) {
		  d.value = +d.value;
		  return d;
		}
		</pre>

		<div class='page-header' id ='team'>
		  <h1>Team Performance <small>Which teams have made good picks?</small></h1>
		</div>
			This table provides a look at how well a team has drafted based on a calculated Team Draft Rating statistic. This value is calculated by looking at each drafted players' career stats compared to the average stats for his draft number. The aggregate mean of the difference of each drafted player's Rating and the expected Rating for their pick position are used to calculate the Team Draft Rating. 

			Also shown are the number of stars, solid, bench players, etc drafted by each team from the number of picks they had.
		<div>
		</div>
		<table class='table table-striped table-hover' id ='table-three'>
		  <tr>
		  <% @table_three.headers.each do |header| %>
		    <th><a id='three-<%= header %>' data-toggle='tooltip'><%= header %></a></th>
		  <% end %> 
		  </tr>
		  <% @table_three.each do |row| %>
		    <tr>
		    <% row.each do |element| %>
		      <td><%= element[1] %></td>
		    <% end %>
		    </tr>
		  <% end %> 
		</table>

		<p>
			Our final graph is a graphical representation of how certain geographical regions in the United States performed during their drafting of players. Using the regions defined in the NBA which include the Atlantic, Southwest, Central, Northwest, Southeast, and Pacific regions, we determined which teams were in each specific region and then calculated the average team draft rating of the teams in each region. Next, we had to determine which specific states actually have teams so that we could mark these states on our datamap while leaving states that don't have basketball teams blank. Finally, we color coded the states in each region according to how that region's average team draft rating, and created a legend where green represents a high average team draft rating and red represents a low average team draft rating.
		</p>

		<div id="graph-two" style="position: relative; width: 750px; height: 450px;"></div>

		<pre style="margin-top:50px;">
		    var map = new Datamap({
		        element: document.getElementById('graph-two'),
		        scope: 'usa',
		        fills: {
		        	GREAT: "#47D147",
		    		GOOD: "#689D35",
		        	NEUTRAL: "#8A6924",
		        	BAD: "#AB3412",
		        	HORRIBLE: "#CC0000",
		        	defaultFill: '#FFFF66'
        		},
        		data: {
        			CA: {
        				fillKey: 'GOOD',
        				region: 'Pacific',
        				avg: 0.1522
        			},
        			AZ: {
        				fillKey: 'GOOD',
        				region: 'Pacific',
        				avg: 0.1522
        			},
        			GA: {
        				fillKey: 'BAD',
        				region: 'Southeast',
        				avg: -0.3233
        			},
        			FL: {
        				fillKey: 'BAD',
        				region: 'Southeast',
        				avg: -0.3233
        			},
        			MD: {
        				fillKey: 'BAD',
        				region: 'Southeast',
        				avg: -0.3233
        			},
        			CO: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			UT: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			OR: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			OK: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			MN: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			IL: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			WI: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			OH: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			MI: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			IN: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			TX: {
        				fillKey: 'BAD',
        				region: 'Southwest',
        				avg: -0.4358
        			},
        			LA: {
        				fillKey: 'BAD',
        				region: 'Southwest',
        				avg: -0.4358
        			},
        			TN: {
        				fillKey: 'BAD',
        				region: 'Southwest',
        				avg: -0.4358
        			},
        			PA: {
        				fillKey: 'GOOD',
        				region: 'Atlantic',
        				avg: 0.3803
        			},
        			NY: {
        				fillKey: 'GOOD',
        				region: 'Atlantic',
        				avg: 0.3803
        			},
        			MA: {
        				fillKey: 'GOOD',
        				region: 'Atlantic',
        				avg: 0.3803
        			}
        		},
        		geographyConfig: {
		            popupTemplate: function(geo, data) {
		                return ['<strong>',
		                        'Average RTG in ' + data.region,
		                        ' region: ' + data.avg,
		                        '</strong>'].join('');
            }
        }
		    });

		    map.legend();
		</pre>
		<script>
		    var map = new Datamap({
		        element: document.getElementById('graph-two'),
		        scope: 'usa',
		        fills: {
		        	GREAT: "#47D147",
		    		GOOD: "#689D35",
		        	NEUTRAL: "#8A6924",
		        	BAD: "#AB3412",
		        	HORRIBLE: "#CC0000",
		        	defaultFill: '#FFFF66'
        		},
        		data: {
        			CA: {
        				fillKey: 'GOOD',
        				region: 'Pacific',
        				avg: 0.1522
        			},
        			AZ: {
        				fillKey: 'GOOD',
        				region: 'Pacific',
        				avg: 0.1522
        			},
        			GA: {
        				fillKey: 'BAD',
        				region: 'Southeast',
        				avg: -0.3233
        			},
        			FL: {
        				fillKey: 'BAD',
        				region: 'Southeast',
        				avg: -0.3233
        			},
        			MD: {
        				fillKey: 'BAD',
        				region: 'Southeast',
        				avg: -0.3233
        			},
        			CO: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			UT: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			OR: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			OK: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			MN: {
        				fillKey: 'HORRIBLE',
        				region: 'Northwest',
        				avg: -0.9146
        			},
        			IL: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			WI: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			OH: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			MI: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			IN: {
        				fillKey: 'GREAT',
        				region: 'Central',
        				avg: 0.5366
        			},
        			TX: {
        				fillKey: 'BAD',
        				region: 'Southwest',
        				avg: -0.4358
        			},
        			LA: {
        				fillKey: 'BAD',
        				region: 'Southwest',
        				avg: -0.4358
        			},
        			TN: {
        				fillKey: 'BAD',
        				region: 'Southwest',
        				avg: -0.4358
        			},
        			PA: {
        				fillKey: 'GOOD',
        				region: 'Atlantic',
        				avg: 0.3803
        			},
        			NY: {
        				fillKey: 'GOOD',
        				region: 'Atlantic',
        				avg: 0.3803
        			},
        			MA: {
        				fillKey: 'GOOD',
        				region: 'Atlantic',
        				avg: 0.3803
        			}
        		},
        		geographyConfig: {
		            popupTemplate: function(geo, data) {
		                return ['<div class="hoverinfo"><strong>',
		                        'Average RTG in ' + data.region,
		                        ' region: ' + data.avg,
		                        '</strong></div>'].join('');
            }
        }
		    });

		    map.legend();
		</script>

		<style>

		#graph-one {
		  font: 10px sans-serif;
		}

		.axis path,
		.axis line {
		  fill: none;
		  stroke: #000;
		  shape-rendering: crispEdges;
		}

		.area {
		  fill: steelblue;
		}

		</style>

		<script>

		var margin = {top: 20, right: 20, bottom: 30, left: 50},
		    width = 960 - margin.left - margin.right,
		    height = 500 - margin.top - margin.bottom;

		var parseDate = d3.time.format("%d-%b-%y").parse;

		var x = d3.scale.linear()
		    .range([0, width]);

		var y = d3.scale.linear()
		    .range([height, 0]);

		var xAxis = d3.svg.axis()
		    .scale(x)
		    .orient("bottom");

		var yAxis = d3.svg.axis()
		    .scale(y)
		    .orient("left");

		var area = d3.svg.area()
		    .x(function(d) { return x(d.pick); })
		    .y0(height)
		    .y1(function(d) { return y(d.rating); });

		var svg = d3.select("#graph-one").append("svg")
		    .attr("width", width + margin.left + margin.right)
		    .attr("height", height + margin.top + margin.bottom)
		  .append("g")
		    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		d3.tsv("data.tsv", function(error, data) {
		  data.forEach(function(d) {
		    d.pick = +d.pick;
		    d.rating = +d.rating;
		  });

		  x.domain([1, d3.max(data, function(d) { return d.pick; })]);
		  y.domain([0, d3.max(data, function(d) { return d.rating; })]);

		  svg.append("path")
		      .datum(data)
		      .attr("class", "area")
		      .attr("d", area);

		  svg.append("g")
		      .attr("class", "x axis")
		      .attr("transform", "translate(0," + height + ")")
		      .call(xAxis)
		      .append("text")

		  svg.append("g")
		      .attr("class", "y axis")
		      .call(yAxis)
		    .append("text")
		      .attr("transform", "rotate(-90)")
		      .attr("y", 6)
		      .attr("dy", ".71em")
		      .style("text-anchor", "end")
		      .text("RTG");

		      svg.append("text")
		        .attr("x", (width / 2))             
		        .attr("y", 0 + (margin.top / 2))
		        .attr("text-anchor", "middle")  
		        .style("font-size", "16px") 
		        .style("text-decoration", "underline")  
		        .text("Pick vs RTG");
		});

		</script>

		<script>

		var margin2 = {top: 30, right: 10, bottom: 10, left: 10},
		    width2 = 960 - margin2.left - margin2.right,
		    height2 = 500 - margin2.top - margin2.bottom;

		var x2 = d3.scale.linear()
		    .range([0, width2])

		var y2 = d3.scale.ordinal()
		    .rangeRoundBands([0, height2], .2);

		var xAxis2 = d3.svg.axis()
		    .scale(x2)
		    .orient("top");

		var svg2 = d3.select("#graph-three").append("svg")
		    .attr("width", width2 + margin2.left + margin2.right)
		    .attr("height", height2 + margin2.top + margin2.bottom)
		  .append("g")
		    .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

		d3.csv("three.csv", type, function(error, data) {
		  x2.domain(d3.extent(data, function(d) { return d.value; })).nice();
		  y2.domain(data.map(function(d) { return d.name; }));

		  svg2.selectAll(".bar")
		      .data(data)
		    .enter().append("rect")
		      .attr("class", function(d) { return d.value < 0 ? "bar_negative" : "bar_positive"; })
		      .attr("x", function(d) { return x2(Math.min(0, d.value)); })
		      .attr("y", function(d) { return y2(d.name); })
		      .attr("width", function(d) { return Math.abs(x2(d.value) - x2(0)); })
		      .attr("height", y2.rangeBand());

		  svg2.selectAll(".bartext")
		  	.data(data)
		  	.enter()
		  	.append("text")
		  	.attr("class","bartext")
		  	.attr("x", function(d) { 
		  		if (d.value > 0) {
		  			if (d.name == "Kobe Bryant")
		  				return x2(0) - 83;
		  			else if (d.name == "Kevin Durant")
		  				return x2(0) - 85;
		  			else if (d.name == "Tony Parker")
		  				return x2(0) - 81;
		  			else if (d.name == "Lebron James")
		  				return x2(0) - 94;
		  			else if (d.name == "Vince Carter")
		  				return x2(0) - 84;
		  			else if (d.name == "Blake Griffin")
		  				return x2(0) - 82;
		  			else if (d.name == "Roy Hibbert")
		  				return x2(0) - 80;
		  			else if (d.name == "Kyrie Irving")
		  				return x2(0) - 75;
		  			else if (d.name == "Elliot Perry")
		  				return x2(0) - 73;
		  			else
		  				return x2(0);
		  		} else {
		  			return x2(0) + 3;
		  		}; })
		      .attr("y", function(d) { return y2(d.name) + 13; })
		  	.text(function(d) {
		  		return d.name;
		  	});
		  svg2.append("g")
		      .attr("class", "x axis")
		      .call(xAxis2);

		  svg2.append("g")
		      .attr("class", "y axis")
		    .append("line")
		      .attr("x1", x2(0))
		      .attr("x2", x2(0))
		      .attr("y2", height2);

		});

		function type(d) {
		  d.value = +d.value;
		  return d;
		}

		</script>

	</div>
</div>